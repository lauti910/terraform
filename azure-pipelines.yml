# Starter pipeline
# Start with a m# trigger:
# - master

pool:
  vmImage: 'ubuntu-latest'
  
trigger:
  - master
  - development
  - testing
   

variables:
  subscription: SP-devops
  resourceGroup: SAESA
  storageAccount: pruebasaesa
  anyTfChanges: false
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}: 
    container: terra
    tfstateFile: terra.terraform.tfstate
    suffix: ''
  ${{ if eq(variables['Build.SourceBranchName'], 'development') }}: 
    container: terra-dev
    tfstateFile: terra-dev.terraform
    suffix: '-dev'
    
  

steps:
- task: TerraformInstaller@0
  displayName: install Terraform v1.1.0
  inputs:
    terraformVersion: '1.1.0'

- task: TerraformTaskV2@2
  displayName: terraform init
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: '$(subscription)'
    backendAzureRmResourceGroupName: '$(resourceGroup)$(suffix)'
    backendAzureRmStorageAccountName: '$(storageAccount)'
    backendAzureRmContainerName: '$(container)'
    backendAzureRmKey: '$(tfstateFile)'

- task: TerraformTaskV2@2
  displayName: terraform plan -out=tfplan
  inputs:
    provider: 'azurerm'
    command: 'plan'
    commandOptions: '-out=tfplan -var="resource_group_name=$(resourceGroup)$(suffix)"'
    # commandOptions: '-detailed-exitcode -out=tfplan'
    environmentServiceNameAzureRM: '$(subscription)'

- task: PowerShell@2
  displayName: detect any terraform change
  inputs:
    targetType: 'inline'
    script: |
      # Write-Host "LASTEXITCODE : $LASTEXITCODE"
      $plan = $(terraform show -json tfplan | ConvertFrom-Json)
      $actions = $plan.resource_changes.change.actions
      Write-Host "Terraform actions : $actions"
      if (($actions -contains 'create') -or ($actions -contains 'delete') -or ($actions -contains 'update'))
      {
        Write-Host "Terraform will perform the following actions : $actions"
        Write-Host "##vso[task.setvariable variable=anyTfChanges;]true"
      }
      else
      {
        Write-Host "There is no change detected in Terraform tfplan file"
      }
- task: TerraformTaskV2@2
  displayName: terraform apply tfplan
  #condition: eq(variables.anyTfChanges, true)
  condition: eq(false, true)
  inputs:
    provider: 'azurerm'
    command: 'apply'
    commandOptions: 'tfplan -var="resource_group_name=$(resourceGroup)$(suffix)"'
    environmentServiceNameAzureRM: '$(subscription)'